---
title:  Annual Returns
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#606060;">Kerry Back</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=80>
output-dir: docs
execute:
  echo: false
  jupyter: python3
  cache: true
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    slide-number: true
    preview-links: true
    scrollable: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 721.scss]
    incremental: true
---

## Annual SPY returns

SPY = S&P 500 Exchange Traded Fund (ETF)

<br>

. . .

```{python}

import yfinance as yf
import plotly.graph_objects as go
import numpy as np

spy = yf.download('SPY', start=1990)['Adj Close']
spy = spy.resample('Y').last()
spy = spy.pct_change().dropna()
spy.index = spy.index.to_period('Y').astype(str)
spy = spy.reset_index()
spy.columns = ['date', 'ret']

trace = go.Scatter(
    x=spy.date,
    y=spy.ret,
        hovertemplate="%{x}<br>%{y:.1%}<extra></extra>",
    name="",
    )
fig = go.Figure(trace)
fig.update_layout(
    template="plotly_dark",
    xaxis_title="",
    yaxis_title="",
    yaxis_tickformat=".0%",
    width=1000,
    height=460,
  )
fig.update_xaxes(title_font_size=24)
fig.update_yaxes(title_font_size=24)
fig.update_layout(font_size=20)

fig.show()
```



##  Compounded SPY returns

. . .

```{python}
compound = (1+spy.ret).cumprod()

trace = go.Scatter(
    x=spy.date,
    y=compound,
        hovertemplate="%{x}<br>$%{y:.2f}<extra></extra>",
    name="",
    )
fig = go.Figure(trace)
fig.update_layout(
    template="plotly_dark",
    xaxis_title="",
    yaxis_title="Accumulation from $1",
    yaxis_tickformat=".0f",
    width=1000,
    height=460,
    legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="right", 
        x=0.99
    )
  )
fig.update_xaxes(title_font_size=24)
fig.update_yaxes(title_font_size=24)
fig.update_layout(font_size=20)

fig.show()
```

<br>

value of $1 investment with dividends reinvested

## Compounded returns on log scale: motivation

  - Let's look at accumulations from two hypothetical stocks. 
    - stock 1: 10% per year 
    - stock 1: 2% per year until 2000 and 10% afterwards
  - It will appear that stock 2 did nothing before 2000 and earned a lot less than stock 1 even after 2000.

## Plot of the Example 

. . .

```{python}
r1 = np.cumprod([1] + 51*[1.1])
r2 = np.cumprod([1] + 30*[1.02] + 21*[1.1])
years = np.arange(1970, 2022)

trace1 = go.Scatter(
  x=years,
  y=r1,
  mode="lines",
  name="stock 1"
)

trace2 = go.Scatter(
  x=years,
  y=r2,
  mode="lines",
  name="stock 2"
)

fig = go.Figure()
fig.add_trace(trace1)
fig.add_trace(trace2)
string = "year %{x}<br>accum = %{y:.2f}"
fig.update_traces(hovertemplate=string)
fig.update_layout(
    template="plotly_dark",
    xaxis_title="",
    yaxis_title="Accumulation",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickprefix="$", 
    yaxis_tickformat=",.0f",
    width=1000,
    height=520,
    legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="left", 
        x=0.1
    )
)

fig.show()

```


## Log (base 10) of accumulation

. . .

```{python}
trace1 = go.Scatter(
  x=years,
  y=np.log10(r1),
  mode="lines",
  name="stock 1"
)

trace2 = go.Scatter(
  x=years,
  y=np.log10(r2),
  mode="lines",
  name="stock 2"
)

fig = go.Figure()
fig.add_trace(trace1)
fig.add_trace(trace2)
string = "year %{x}<br>log = %{y:.2f}"
fig.update_traces(hovertemplate=string)
fig.update_layout(
    template="plotly_dark",
    xaxis_title="",
    yaxis_title="Log of Accumulation",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickformat=",.1f",
    width=1000,
    height=520,
    legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="left", 
        x=0.1
    )
)

fig.show()
```


## Map $y$ tick labels to dollars

. . .


```{python}
trace1 = go.Scatter(
  x=years,
  y=r1,
  mode="lines",
  name="stock 1"
)

trace2 = go.Scatter(
  x=years,
  y=r2,
  mode="lines",
  name="stock 2"
)

fig = go.Figure()
fig.add_trace(trace1)
fig.add_trace(trace2)
string = "year %{x}<br>$%{y:.2f}"
fig.update_traces(hovertemplate=string)
fig.update_layout(
    template="plotly_dark",
    xaxis_title="",
    yaxis_title="Accumulation",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_type="log",
    yaxis_tickformat=",.0f",
    yaxis_tickprefix="$",
    width=1000,
    height=520,
    legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="left", 
        x=0.1
    ),
    yaxis = dict(
        tickmode = 'array',
        tickvals = [1, 2, 5, 10, 20, 50, 100],
    )
)

fig.show()
```


##  Compounded SPY returns on log scale

```{python}
trace = go.Scatter(
    x=spy.date,
    y=compound,
        hovertemplate="%{x}<br>$%{y:.2f}<extra></extra>",
    name="",
    )
fig = go.Figure(trace)
fig.update_layout(
    template="plotly_dark",
    xaxis_title="",
    yaxis_title="Accumulation from $1",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    yaxis_tickformat=".0f",
    yaxis_type="log",
    width=1000,
    height=460,
    yaxis = dict(
        tickmode = 'array',
        tickvals = [2, 5, 10, 16],
    )
  )

fig.show()
```

<br>

value of $1 investment with dividends reinvested


## Box Plot

- Box contains 25th percentile through 75th percentile.

- Median is indicated as a line in the box.
- Fences extend 1.5 times inter-quartile range from 25th and 75th percentiles or to the most extreme observation if that is closer to the box. 
    - inter-quartile range = 75th minus 25th percentile
- Points outside the fences are outliers. 
    - If you simulate data from a normal distribution, there will typically be very few points outside the fences.

## Box and density plots of annual SPY returns <a href="https://learn-investments.rice-business.org/risk/returns"><img src="images/Rice_Owl.jpg" style="width:.65in;" align="right"> </a>

::: {.panel-tabset}

## Box plot
```{python}
trace = go.Box(
    x=spy.ret,
    text=spy.date,
    hovertemplate="%{text}<extra></extra>",
    name="",
    )
fig = go.Figure(trace)
fig.update_layout(
    template="plotly_dark",
    yaxis_title="",
    xaxis_title="Annual Return",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    xaxis_tickformat=".0%",
    yaxis_tickformat="",
    width=1000,
    height=500,
)

fig.show()
```

## Density plot

```{python}

from scipy.stats import norm
from scipy.stats import gaussian_kde as kde

density = kde(spy.ret)
grid = np.linspace(np.min(spy.ret), np.max(spy.ret), 100)

trace1 = go.Scatter(
  x=grid,
  y=density(grid),
  mode="lines",
  name="actual"
)

trace2 = go.Scatter(
  x=grid, 
  y=norm.pdf(grid, np.mean(spy.ret), scale=np.std(spy.ret)), 
  mode="lines", 
  name="normal"
)
fig = go.Figure()
fig.add_trace(trace1)
fig.add_trace(trace2)
fig.update_layout(
    template="plotly_dark",
    xaxis_title="Annual Return",
    yaxis_title="",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    xaxis_tickformat=".0%",
    yaxis_tickformat="",
    width=1000,
    height=360,
     legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="left", 
        x=0.01
    ),
)

fig.show()
```
Normal distribution has same mean and std dev as actual.
<br>x-axis range is minimum to maximum return.
:::


## Autocorrelations

- Autocorrelation is the correlation of a time series with its own lagged values.
- Autocorrelation at lag 1 tells us whether the current value predicts the next one.
- For monthly data, autocorrelation might be high at lag 12 (seasonality).

## Autocorrelations of annual SPY returns

. . 

```{python}

from statsmodels.graphics.tsaplots import plot_acf
import matplotlib.pyplot as plt
plt.style.use('classic')
plt.rcParams.update({'font.size': 26})
fig = plot_acf(spy.ret)
plt.xlabel("Year")
plt.ylabel("Autocorrelation")
plt.title("")

_ = fig.set_size_inches(18,9)
```


## Does last year's return predict this year's?

. . .

```{python}

import statsmodels.formula.api as smf

spy['lag'] = spy.ret.shift()
spy = spy.dropna()

trace = go.Scatter(
  x=spy.lag,
  y=spy.ret,
  text=spy.date,
  mode="markers",
  hovertemplate="%{text}<extra></extra>",
  showlegend=False,
  marker=dict(size=15)
)
fig = go.Figure(trace)

result = smf.ols("ret ~ lag", data=spy).fit()
predict = result.params['Intercept'] + result.params['lag']*spy.lag

trace = go.Scatter(
  x=spy.lag,
  y=predict,
  mode="lines",
  name="regression line",
)

fig.add_trace(trace)

fig.update_layout(
    template="plotly_dark",
    xaxis_title="Lagged Return",
    yaxis_title="Return",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    xaxis_tickformat=".0%",
    yaxis_tickformat=".0%",
    width=1000,
    height=520,
)

fig.show()
```
No, the autocorrelation is almost zero.





