---
title:  "More Diversification"
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#606060;">Kerry Back</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=80>
output-dir: docs
execute:
  echo: false
  jupyter: python3
  cache: true
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    slide-number: true
    preview-links: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 721.scss]
    incremental: true
    scrollable: true
---

## More assets

- $n$ risky assets with returns $r_i$
- vector $\bar{r}$ of expected returns 
- vector $w$ of portfolio weights $w_i$ with $\sum_{i=1}^n w_i=1$
- portfolio expected return = $\sum_{i=1}^n w_i \bar{r}_i = w^\top \bar{r}$.

## Portfolio variance

- asset return variances $\sigma_i^2$
- covariances $\sigma_{ij} = \rho_{ij}\sigma_i\sigma_j$ where $\rho_{ij}=$ correlation
- portfolio variance is sum of weight squared times variance
  - plus sum of 2 times weight times weight times covariance for each distinct pair of assets:

. . .

$$\sum_{i=1}^n w_i^2 \sigma_i^2 + 2 \sum_{i=1}^n \sum_{j=i+1}^n w_iw_j \sigma_{ij}$$


##  Special case <a href="https://learn-investments.rice-business.org/portfolios/diversification"><img src="images/Rice_Owl.jpg" style="width:.65in;" align=right></a> 

- Suppose all standard deviations are the same $\sigma$
- Suppose all correlations are the same $\rho$
- Consider equally weighted portfolio $w_i=1/n$ 
- Portfolio variance is

. . .

$$\frac{\sigma^2}{n} + \frac{n-1}{n} \rho \sigma^2$$

## Covariance matrix and portfolio variance

- $n$ risky assets
- $C = n \times n$ covariance matrix
  - variances on diagonal
  - covariances off-diagonal
- portfolio variance is $w^\top C w$
- $C=SRS$ where 
  - $S=$ diagonal matrix of std devs, 
  - $R=$ correlation matrix

## Example

. . .

```{.p code-line-numbers="1-5|7|8-11|12|13"}
import numpy as np

sd1, sd2, sd3 = 0.1, 0.15, 0.12
corr12, corr13, corr23 = 0.5, 0.7, 0.6
w1, w2, w3 = 0.2, 0.3, 0.5

S = np.diag([sd1, sd2, sd3])
R = np.identity(3)
R[0, 1] = R[1, 0] = corr12
R[0, 2] = R[2, 0] = corr13
R[1, 2] = R[2, 1] = corr23
C = S @ R @ S
w = np.array([w1, w2, w3])
portvar = w @ C @ w
```

## Mean -- Standard Deviation Plot <a href="https://learn-investments.rice-business.org/portfolios/two-assets"><img src="images/Rice_Owl.jpg" alt="HTML tutorial" style="width:.65in;" align=right></a> 

- Set  mn1, mn2, mn3 = 0.06, 0.08, 0.10

. . .

```{python}
import plotly.graph_objects as go
import numpy as np

mn1, mn2, mn3 = 0.06, 0.08, 0.10
sd1, sd2, sd3 = 0.1, 0.15, 0.12
corr12, corr13, corr23 = 0.5, 0.7, 0.6
w1, w2, w3 = 0.2, 0.3, 0.5

S = np.diag([sd1, sd2, sd3])
R = np.identity(3)
R[0, 1] = R[1, 0] = corr12
R[0, 2] = R[2, 0] = corr13
R[1, 2] = R[2, 1] = corr23
C = S @ R @ S
w = np.array([w1, w2, w3])
mns = np.array([mn1, mn2, mn3])
portmn = w @ mns
portsd = np.sqrt(w @ C @ w)
trace1 = go.Scatter(
  x=[sd1],
  y=[mn1],
  mode="markers",
  marker=dict(size=15),
  name="asset 1",
  hovertemplate="asset 1<br>mean=%{y:.0%}<br>std dev=%{x:.0%}<extra></extra>"
)
trace2 = go.Scatter(
  x=[sd2],
  y=[mn2],
  mode="markers",
  marker=dict(size=15),
  name="asset 2",
  hovertemplate="asset 2<br>mean=%{y:.0%}<br>std dev=%{x:.0%}<extra></extra>"
)
trace3 = go.Scatter(
  x=[sd3],
  y=[mn3],
  mode="markers",
  marker=dict(size=15),
  name="asset 3",
  hovertemplate="asset 3<br>mean=%{y:.0%}<br>std dev=%{x:.0%}<extra></extra>"
)
trace4 = go.Scatter(
  x=[portsd],
  y=[portmn],
  mode="markers",
  marker=dict(size=15),
  name="portfolio",
  hovertemplate="portfolio<br>mean=%{y:.1%}<br>std dev=%{x:.1%}<extra></extra>"
)
fig = go.Figure()
for trace in (trace1, trace2, trace3, trace4):
  fig.add_trace(trace)

fig.update_layout(
    template="plotly_dark",
    xaxis_title="Standard Deviation",
    yaxis_title="Mean",
    yaxis_tickformat=".0%",
    xaxis_tickformat=".0%",
    width=1000,
    height=460,
    legend=dict(
        yanchor="bottom", 
        y=0.01, 
        xanchor="center", 
        x=0.5
    )
  )
fig.update_xaxes(title_font_size=24)
fig.update_yaxes(title_font_size=24)
fig.update_layout(font_size=20)

fig.show()
```

