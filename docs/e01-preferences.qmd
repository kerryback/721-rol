---
title:  "Preferences"
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#606060;">Kerry Back</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=80>
execute:
  echo: false
  jupyter: python3
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    slide-number: true
    preview-links: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 721.scss]
    incremental: true
---

## Risk Aversion

- To model liking high expected returns and disliking high variance, we can rank portfolios based on a combination of mean and variance:

. . . 

$$\text{expected return}-\frac{1}{2}A\times\text{variance}$$

- The 1/2 is a convention. The number $A$ is risk aversion. 

## Indifference curves <a href="https://learn-investments.rice-business.org/portfolios/preferences"><img src="images/Rice_Owl.jpg" style="width:.65in;" align=right vertical-align=center></a>

```{python}
import plotly.graph_objects as go
import numpy as np
import plotly.io as pio


plotly_template = pio.templates["plotly_dark"]
colors = plotly_template.layout.colorway
blue = colors[0]
red = colors[1]

raver1, raver2 = 2, 10
traces = []
x = np.linspace(0,0.2,50)
for A, color in zip((raver1, raver2), (blue, red)):
  mn = 0.02
  trace = go.Scatter(
            x=x,
            y=mn + 0.5 * A * x ** 2,
            mode="lines",
            line=dict(color=color),
            hovertemplate=f"risk aversion = {A}<br>utility = {mn:.2f}<extra></extra>",
            name=f"risk aversion = {A}"
  )
  traces.append(trace)
  for mn in (0.04, 0.06):

    trace = go.Scatter(
                x=x,
                y=mn + 0.5*A*x**2,
                mode="lines",
                line=dict(color=color),
                hovertemplate=f"risk aversion = {A}<br>utility = {mn:.2f}<extra></extra>",
                showlegend=False
    )
    traces.append(trace)

fig = go.Figure()
for trace in traces:
  fig.add_trace(trace)

fig.update_layout(
        template="plotly_dark",
        yaxis_tickformat=".0%",
        xaxis_tickformat=".0%",
        width=1000,
        height=460,
        xaxis_title="Standard Deviation",
        yaxis_title="Expected Return",
        yaxis_title_font_size=24,
        xaxis_title_font_size=24,
        legend=dict(
          yanchor="top", 
          y=0.99, 
          xanchor="left", 
          x=0.01),
        font_size=20
)

fig.show()
```


## Benefit-cost ratio at the optimum

- Recall: for frontier portfolios, the marginal benefit-cost ratio is the same across assets:
  - marginal benefit / marginal cost $= k$
  - marginal benefit = risk premium
  - marginal cost is the marginal contribution to portfolio risk $C_i^\top w$
  - so $(\bar{r}_i-r_f)/C_i^\top w = k$
- The [optimal]{style="color:tomato; font-weight:bold"} frontier portfolio is the one for which [$(\bar{r}_i-r_f)/C_i^\top w = A$]{style="color:tomato; font-weight:bold"}.

#

- Repeating: $(\bar{r}_i-r_f)/C_i^\top w = A$
- High risk aversion $A \Rightarrow$ low marginal contributions to risk $C_i^\top w$
- Solve:
  - Rearrange: $(1/A)(\bar{r}_i-r_f) = C_i^\top w$
  - Stack: $(1/A)(\bar{r}-r_f1_n) = Cw$
  - Solve: $(1/A)C^{-1}(\bar{r}-r_f1_n) = w$
- High risk aversion $A \Rightarrow$ small $w$

## Example

. . .

```{.p code-line-numbers="1-6|8"}
import numpy as np

rf = 0.02
mn1, mn2, mn3 = 0.06, 0.08, 0.10
sd1, sd2, sd3 = 0.1, 0.15, 0.12
corr12, corr13, corr23 = 0.5, 0.7, 0.6

raver = 6
```

## Solution of the example <a href="https://learn-investments.rice-business.org/portfolios/optimal"><img src="images/Rice_Owl.jpg" style="width:.65in;" align=right vertical-align=center></a>

. . .

```{.p code-line-numbers="1-9|10"}
S = np.diag([sd1, sd2, sd3])
R = np.identity(3)
R[0, 1] = R[1, 0] = corr12
R[0, 2] = R[2, 0] = corr13
R[1, 2] = R[2, 1] = corr23
C = S @ R @ S

rprem = np.array([mn1, mn2, mn3]) - rf
Cinv = np.linalg.inv(C)
w = (1/A) * Cinv @ rprem
```

```{python}
import numpy as np

rf = 0.02
mn1, mn2, mn3 = 0.06, 0.08, 0.10
sd1, sd2, sd3 = 0.1, 0.15, 0.12
corr12, corr13, corr23 = 0.5, 0.7, 0.6

raver = 6

S = np.diag([sd1, sd2, sd3])
R = np.identity(3)
R[0, 1] = R[1, 0] = corr12
R[0, 2] = R[2, 0] = corr13
R[1, 2] = R[2, 1] = corr23
C = S @ R @ S

rprem = np.array([mn1, mn2, mn3]) - rf
Cinv = np.linalg.inv(C)
w = (1/A) * Cinv @ rprem

string = f"w1={w[0]:.1%}, w2={w[1]:.1%}, w3={w[2]:.1%}"
print(string)
```
