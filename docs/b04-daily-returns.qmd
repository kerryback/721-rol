---
title:  "Daily Returns"
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#606060;">Kerry Back</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=80>
output-dir: docs
execute:
  echo: false
  jupyter: python3
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    slide-number: true
    preview-links: true
    scrollable: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 721.scss]
    incremental: true
---


## Daily SPY returns

. . .

```{python}
import yfinance as yf
import plotly.graph_objects as go
import numpy as np
spy = yf.download('SPY', start=1990)['Adj Close']
spy = spy.pct_change().dropna()
spy.index = spy.index.astype(str)
spy = spy.reset_index()
spy.columns = ['date', 'ret']

trace = go.Scatter(
    x=spy.date,
    y=spy.ret,
        hovertemplate="%{x}<br>%{y:.1%}<extra></extra>",
    name="",
    )

fig = go.Figure(trace)

fig.update_layout(
    template="plotly_dark",
    xaxis_title="",
    yaxis_title="",
    yaxis_title_font_size=24,
    xaxis_title_font_size=24,
    font_size=20,
    yaxis_tickformat=".0%",
    width=1000,
    height=500,
  )

fig.show()
```


## Box and density plots of daily SPY returns <a href="https://learn-investments.rice-business.org/risk/frequency"><img src="images/Rice_Owl.jpg" style="width:.65in;" align="right"> </a>

::: {.panel-tabset}

## Box plot

```{python}
#| panel: input
#| layout-ncol: 2
trace = go.Box(
    x=spy.ret,
    text=spy.date,
    hovertemplate="%{text}<extra></extra>",
    name="",
    )
fig = go.Figure(trace)
fig.update_layout(
    template="plotly_dark",
    xaxis_title="Daily Return",
    yaxis_title="",
    yaxis_title_font_size=24,
    xaxis_title_font_size=24,
    font_size=20,
    xaxis_tickformat=".0%",
    yaxis_tickformat="",
    width=980,
    height=440,
)

fig.show()
```

## Density plot

```{python}
from scipy.stats import norm
from scipy.stats import gaussian_kde as kde
density = kde(spy.ret)

grid = np.linspace(np.min(spy.ret), np.max(spy.ret), 100)
trace1 = go.Scatter(
  x=grid,
  y=density(grid),
  mode="lines",
  name="actual"
)
trace2 = go.Scatter(
  x=grid, 
  y=norm.pdf(grid, loc=np.mean(spy.ret), scale=np.std(spy.ret)), 
  mode="lines", 
  name="normal"
)
fig = go.Figure()
fig.add_trace(trace1)
fig.add_trace(trace2)
fig.update_layout(
    template="plotly_dark",
    xaxis_title="Daily Return",
    yaxis_title="",
    yaxis_title_font_size=24,
    xaxis_title_font_size=24,
    font_size=20,
    xaxis_tickformat=".0%",
    yaxis_tickformat="",
    width=1000,
    height=360,
     legend=dict(
        yanchor="top", 
        y=0.99, 
        xanchor="right", 
        x=0.99
    ),
)

fig.show()
```
Normal distribution has same mean and std dev as actual.<br>x-axis range is minimum to maximum return.

:::



## Autocorrelations of daily SPY returns

. . .

```{python}
from statsmodels.graphics.tsaplots import plot_acf
import matplotlib.pyplot as plt
plt.style.use('classic')
plt.rcParams.update({'font.size': 26})
fig = plot_acf(spy.ret)
fig.set_size_inches(18,9)
plt.xlabel("Year")
plt.ylabel("Autocorrelation")
_ = plt.title("")

```


## Does today's return predict tomorrow's?

. . .

```{python}
import statsmodels.formula.api as smf
spy['lag'] = spy.ret.shift()
spy = spy.dropna()
trace = go.Scatter(
  x=spy.lag,
  y=spy.ret,
  text=spy.date,
  mode="markers",
  hovertemplate="%{text}<extra></extra>",
  showlegend=False,
)
fig = go.Figure(trace)
result = smf.ols("ret ~ lag", data=spy).fit()
predict = result.params['Intercept'] + result.params['lag']*spy.lag
trace = go.Scatter(
  x=spy.lag,
  y=predict,
  mode="lines",
  name="regression line"
)
fig.add_trace(trace)
fig.update_layout(
    template="plotly_dark",
    xaxis_title="Lagged Return",
    yaxis_title="Return",
    yaxis_title_font_size=24,
    xaxis_title_font_size=24,
    font_size=20,
    xaxis_tickformat=".0%",
    yaxis_tickformat=".0%",
    width=1000,
    height=500,
)

fig.show()
```

No, the autocorrelation is almost zero.

## Autocorrelations of absolute returns

. . .

```{python}

plt.style.use('classic')
plt.rcParams.update({'font.size': 26})
fig = plot_acf(spy.ret.abs())
fig.set_size_inches(18,9)
plt.xlabel("Year")
plt.ylabel("Autocorrelation")
_ = plt.title("")
```


## Does today's absolute return predict tomorrow's?

. . .

```{python}

import plotly.io as pio
plotly_template = pio.templates["plotly_dark"]
colors = plotly_template.layout.colorway
blue = colors[0]

spy['absret'] = spy.ret.abs()
spy['abslag'] = spy.lag.abs()
trace = go.Scatter(
  x=spy.abslag,
  y=spy.absret,
  text=spy.date,
  mode="markers",
  hovertemplate="%{text}<extra></extra>",
  showlegend=False,
  marker=dict(size=10)
)
fig = go.Figure(trace)
result = smf.ols("absret ~ abslag", data=spy).fit()
spy['predict'] = result.params['Intercept'] + result.params['abslag']*spy.abslag
spy = spy.sort_values(by="abslag")
trace = go.Scatter(
  x=spy.abslag,
  y=spy.predict,
  mode="lines",
  name="regression line",
)
fig.add_trace(trace)
fig.update_layout(
    template="plotly_dark",
    xaxis_title="Lagged Absolute Return",
    yaxis_title="Absolute Return",
    yaxis_title_font_size=24,
    xaxis_title_font_size=24,
    font_size=20,
    xaxis_tickformat=".0%",
    yaxis_tickformat=".0%",
    xaxis_rangemode="tozero",
    yaxis_rangemode="tozero",
    width=1000,
    height=500,
)

fig.show()
```
Yes, volatility is persistent.


